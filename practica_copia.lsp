(defun VISUALIZADORCOLOR200 (imagen a z)
	(setq fichero (open imagen :direction :input
	:element-type 'unsigned-byte))
	(setq pixel 1)
	(setq B 0)
	(setq G 0)
	(setq R 0)
	(setq x a)
	(setq y z)
	(move x y)
	(loop
		(setq B (read-byte fichero nil))
		(if (null B) (return ()))
		(setq G (read-byte fichero nil))
		(if (null G) (return ()))
		(setq R (read-byte fichero nil))
		(if (null R) (return ()))
		(color R G B)
		(draw (+ 1 x) y)
		(setq pixel (+ pixel 1))
		(setq x (+ x 1))
		(cond  ((> pixel 200) (setq pixel 1) (setq x a) (setq y (+ y 1)) ) )
		(move x y)
	)
       (close fichero)
)

(defun VISUALIZADORCOLOR20 (imagen a z)
	(setq fichero (open imagen :direction :input
	:element-type 'unsigned-byte))
	(setq pixel 1)
	(setq B 0)
	(setq G 0)
	(setq R 0)
	(setq x a)
	(setq y z)
	(move x y)
	(loop
		(setq B (read-byte fichero nil))
		(if (null B) (return ()))
		(setq G (read-byte fichero nil))
		(if (null G) (return ()))
		(setq R (read-byte fichero nil))
		(if (null R) (return ()))
		(color R G B)
		(draw (+ 1 x) y)
		(setq pixel (+ pixel 1))
		(setq x (+ x 1))
		(cond  ((> pixel 20) (setq pixel 1) (setq x a) (setq y (+ y 1)) ) )
		(move x y)
	)
       (close fichero)
)

(defun cargarFotos ()
	(VISUALIZADORCOLOR200 "fotos/LogoPractica.img" 440 175)
	(VISUALIZADORCOLOR20 "fotos/P_NB.img" 90 345)
	(VISUALIZADORCOLOR20 "fotos/R_NB.img" 120 345)
	(VISUALIZADORCOLOR20 "fotos/O_NB.img" 150 345)
	(VISUALIZADORCOLOR20 "fotos/D_NB.img" 180 345)
	(VISUALIZADORCOLOR20 "fotos/U_NB.img" 210 345)
	(VISUALIZADORCOLOR20 "fotos/C_NB.img" 240 345)
	(VISUALIZADORCOLOR20 "fotos/T_NB.img" 270 345)
	(VISUALIZADORCOLOR20 "fotos/O_NB.img" 300 345)
	(VISUALIZADORCOLOR20 "fotos/S_NB.img" 330 345)
)

(defun cargarLetrasPedido ()
	(VISUALIZADORCOLOR20 "fotos/P_NB.img" 10 145)
	(VISUALIZADORCOLOR20 "fotos/E_NB.img" 31 145)
	(VISUALIZADORCOLOR20 "fotos/D_NB.img" 52 145)
	(VISUALIZADORCOLOR20 "fotos/I_NB.img" 73 145)
	(VISUALIZADORCOLOR20 "fotos/D_NB.img" 94 145)
	(VISUALIZADORCOLOR20 "fotos/O_NB.img" 115 145)
	(setq x 115)
	(dotimes (i 23 x)       ;desde i=0 hasta i=22
		(VISUALIZADORCOLOR20 "fotos/_NB.img" (+ x 21) 145)
	)
)

(defun cargarLetrasTotal ()
	(VISUALIZADORCOLOR20 "fotos/T_NB.img" 334 5)
	(VISUALIZADORCOLOR20 "fotos/O_NB.img" 355 5)
	(VISUALIZADORCOLOR20 "fotos/T_NB.img" 376 5)
	(VISUALIZADORCOLOR20 "fotos/A_NB.img" 397 5)
	(VISUALIZADORCOLOR20 "fotos/L_NB.img" 418 5)
	(setq x 423)
	(dotimes (i 9 x)       ;desde i=0 hasta i=8
		(VISUALIZADORCOLOR20 "fotos/_NB.img" (+ x 21) 5)
	)
)

(defun visualizarListaProductos ()
	(setq fichero (open "docs/productos.txt" :direction :input))
	(goto-xy 1 3)
	(princ (read-line fichero nil))
	(goto-xy 30 3)
	(princ (read-line fichero nil))
	(goto-xy 1 4)
	(princ (read-line fichero nil))
	(goto-xy 30 4)
	(princ (read-line fichero nil))
	(goto-xy 1 5)
	(princ (read-line fichero nil))
	(goto-xy 30 5)
	(princ (read-line fichero nil))
	(goto-xy 1 6)
	(princ (read-line fichero nil))
	(goto-xy 30 6)
	(princ (read-line fichero nil))
	(goto-xy 1 7)
	(princ (read-line fichero nil))
	(goto-xy 30 7)
	(princ (read-line fichero nil))
	(goto-xy 1 8)
	(princ (read-line fichero nil))
	(goto-xy 30 8)
	(princ (read-line fichero nil))
	(goto-xy 1 9)
	(princ (read-line fichero nil))
	(goto-xy 30 9)
	(princ (read-line fichero nil))
	(goto-xy 1 10)
	(princ (read-line fichero nil))
	(goto-xy 30 10)
	(princ (read-line fichero nil))
	(goto-xy 1 11)
	(princ (read-line fichero nil))
	(goto-xy 30 11)
	(princ (read-line fichero nil))
	(goto-xy 1 12)
	(princ (read-line fichero nil))
	(goto-xy 30 12)
	(princ (read-line fichero nil))
)

(defun ficheroPedido (nombre)
	(setq fichero (open nombre :direction :output))
	(setq a (read))
	(setq dim (length a))

	(loop
		(if (= dim 0) (return))
		(princ a fichero)
		(write-char #\newline fichero)
		(setq a (read))
		(setq dim (length a))
	)
					(close fichero)
)

;coger el nombre y el precio del producto desde el fichero (WIP)
; https://www.tutorialspoint.com/lisp/lisp_strings.htm
;(defun cogerProducto (nProducto nombre precio)
	;(setq fichero (open "docs/productos.txt" :direction :input))
	;(dotimes (i nProducto)
	;	(setq lectura (read-line fichero nil))
	;)
	;(setq cadena1 (format t "~d. " nProducto))
	;(setq tabulador "\t")
	;(setq trim (string-trim cadena1 lectura))
	;(setq trim1 (string-left-trim tabulador trim))
	;(goto-xy 1 15)
	;(print cadena1)
	;(print trim)
	;(print trim1)
	;(setq nombre trim1)
	;(setq precio (caddr lectura))
;)

(defun dibujarInterfaz ()
	(cls)
	(visualizarListaProductos)
)

(defun inicio ()
	(dibujarInterfaz)
	;(cargarLetrasPedido)
	;(cargarLetrasTotal)

	(loop
	;INICIO
	(goto-xy 1 23)
	(cleol)
	(princ "[] INICIAR PEDIDO (S/N): ")
	(setq entrada (read))
	(if (string-equal entrada "S") (return()))
	) ;Acaba el loop

	;NUMERO DE PEDIDO
	(goto-xy 1 23)
	(cleol)
	(princ "[] NUMERO DE PEDIDO: ")
	(setq nPedido (read))

	;DISPLAY DE NUMERO DE PEDIDO EN PANTALLA

	(setq total 0)
	(setq carrito 0)
	(setq columna 0)
	(setq fila 0)

	(loop
	;NUMERO DE PRODUCTO
	(goto-xy 1 23)
	(cleol)
	(princ "[] NUMERO DE PRODUCTO: ")
	(setq nProducto (read))
	(case nProducto
		(1 (setq nombre "MASCARILLA") (setq precio 10.00))
		(2 (setq nombre "JABON") (setq precio 05.00))
		(3 (setq nombre "PASTA") (setq precio 02.39))
		(4 (setq nombre "CERVEZA") (setq precio 03.69))
		(5 (setq nombre "FRESAS") (setq precio 02.56))
		(6 (setq nombre "ARROZ") (setq precio 69.05))
		(7 (setq nombre "AGUACATE") (setq precio 02.78))
		(8 (setq nombre "ACEITE") (setq precio 01.98))
		(9 (setq nombre "AZUCAR") (setq precio 01.34))
		(10 (setq nombre "GALLETAS") (setq precio 03.78))
		(11 (setq nombre "SALSA") (setq precio 04.32))
		(12 (setq nombre "VINAGRE") (setq precio 05.65))
		(13 (setq nombre "AGUA") (setq precio 15.76))
		(14 (setq nombre "VINO") (setq precio 36.34))
		(15 (setq nombre "CAFE") (setq precio 05.86))
		(16 (setq nombre "CEREALES") (setq precio 04.67))
		(17 (setq nombre "GARBANZOS") (setq precio 01.23))
		(18 (setq nombre "ALUBIAS") (setq precio 02.56))
		(19 (setq nombre "HARINA") (setq precio 00.47))
		(20 (setq nombre "COMINO") (setq precio 07.14))
	)

	;PREGUNTAR UNIDADES
	(goto-xy 1 23)
	(cleol)
	(format t "[] UNIDADES ~s: " nombre)
	(setq unidades (read))

	;CONFIRMACION DE UNIDADES + SUMA AL TOTAL + DISPLAY EN PANTALLA
	(goto-xy 1 23)
	(cleol)
	(format t "[] ~d DE ~s (S/N): " unidades nombre)
	(setq confirmacion (read))
	(cond ((string-equal confirmacion "S")
		(setq total (+ total (* unidades precio)))
		(goto-xy (+ 1 columna) (+ 15 fila))
		(setq columna (+ 27 columna))
		(setq carrito (+ 1 carrito))
		(format t "[~s/~d/~d]" nombre unidades (* precio unidades))
		(cond ((= carrito 3)
			(setq carrito 0)
			(setq columna 0)
			(setq fila (+ fila 1))
		))
	))

	;CONTINUAR CON EL PEDIDO?
	(goto-xy 1 23)
	(cleol)
	(princ "[] CONTINUAR PEDIDO (S/N): ")
	(setq continuar (read))
	(if (string-equal continuar "N") (return()))
	) ;Acaba el loop

	;CREAR FICHERO PEDIDO
	(setq nombre (format t "pedido~d.txt" nPedido))
	(ficheroPedido nombre)

	;FINALIZACION
	(goto-xy 1 23)
	(cleol)
	(princ "[] EL PEDIDO HA SIDO GUARDADO CORRECTAMENTE")
)
